// Importa las clases necesarias de la librer√≠a discord.js
const {
  SlashCommandBuilder, // Herramienta para construir comandos tipo slash
  EmbedBuilder, // Herramienta para crear embeds
  ChatInputCommandInteraction, // Tipo de interacci√≥n para comandos de entrada de chat
  ChannelType, // Permite definir tipos de canales
  ActionRowBuilder, // Herramienta para construir filas de acci√≥n (botones, men√∫s, etc.)
  StringSelectMenuBuilder, // Herramienta para crear men√∫s de selecci√≥n de texto
  StringSelectMenuOptionBuilder, // Herramienta para crear opciones dentro de un men√∫ de selecci√≥n de texto
} = require("discord.js"); // Importa la librer√≠a discord.js

// Exporta el m√≥dulo que contiene el comando
module.exports = {
  // Define los datos del comando usando SlashCommandBuilder
  data: new SlashCommandBuilder()
    .setName("tickets") // Establece el nombre del comando como "tickets"
    .setDescription("ü§ë Establece un sistema de tickets.") // Establece la descripci√≥n del comando con un emoji
    .addChannelOption(
      // A√±ade una opci√≥n para seleccionar un canal
      (
        option // Funci√≥n que recibe el objeto de opci√≥n
      ) =>
        option
          .setName("canal") // Nombre de la opci√≥n para el canal
          .setDescription("Canal donde enviar el sistema.") // Descripci√≥n de la opci√≥n
          .setRequired(true) // Establece que esta opci√≥n es obligatoria
          // Define el tipo de canal permitido: solo canales de texto en el servidor
          .addChannelTypes(ChannelType.GuildText)
    ),

  /**
   * Maneja la ejecuci√≥n del comando /tickets.
   * @param {ChatInputCommandInteraction} interaction - La interacci√≥n del comando.
   * @param {Client} client - El cliente de Discord.
   */
  async execute(interaction, client) {
    // Funci√≥n que se ejecuta al llamar al comando
    // Extrae las opciones y el servidor de la interacci√≥n
    const { options, guild } = interaction; // Desestructura las opciones y el servidor de la interacci√≥n

    const channel = options.getChannel("canal"); // Obtiene el canal seleccionado por el usuario

    // Crea un nuevo embed para la respuesta
    const embed = new EmbedBuilder() // Crea una instancia de EmbedBuilder
      .setAuthor({
        // Configura el autor del embed
        name: client.user.username, // Nombre del bot como autor
        iconURL: client.user.displayAvatarURL(), // URL del avatar del bot
      })
      .setTitle("üõ†Ô∏è Panel de Soporte") // Establece el t√≠tulo del embed con un emoji
      .setDescription(
        // Establece la descripci√≥n del embed
        `Abre un ticket de soporte haciendo clic en una de las opciones de men√∫ aqu√≠ abajo. üí¨` // Mensaje de instrucci√≥n con emojis
      )
      .setColor("Random") // Establece un color aleatorio para el embed
      .setTimestamp() // A√±ade la fecha y hora actual al embed
      .setImage(
        // A√±ade una imagen al embed
        `https://cdn.discordapp.com/attachments/1150529910201389116/1308817433007624312/xd.png?ex=673f52b8&is=673e0138&hm=74ef6616a206420c8e953aa3abe5ab1f6a0a4f0581551eaafa2729c70b663102&`
      )
      .addFields(
        // A√±ade campos adicionales al embed
        {
          name: "¬øC√≥mo abrir un ticket? ü§î", // T√≠tulo del primer campo con emoji
          // Proporciona instrucciones sobre c√≥mo abrir un ticket, usando emojis para hacer el texto m√°s atractivo
          value:
            "1. Selecciona una opci√≥n de men√∫. üìã\n2. Describe tu problema. ‚úçÔ∏è\n3. Espera a que un moderador te atienda. ‚è≥",
        },
        {
          name: "Tiempo de respuesta ‚è∞", // T√≠tulo del segundo campo con emoji
          // Informaci√≥n sobre el tiempo de respuesta esperado
          value: "Generalmente, respondemos en menos de 24 horas. üìÖ",
        }
      )
      .setFooter({
        // Configura el pie de p√°gina del embed
        text: "Comando ejecutado", // Texto del pie del embed
        iconURL: guild.iconURL(), // Icono del pie, usando la imagen del servidor actual
      });

    // Crea un men√∫ de selecci√≥n para las opciones de soporte
    const menu = new ActionRowBuilder().addComponents(
      // Crea una fila de acci√≥n y a√±ade componentes
      new StringSelectMenuBuilder() // Crea un men√∫ de selecci√≥n
        .setCustomId("support") // Establece un ID personalizado para el men√∫
        .setDisabled(false) // Habilita el men√∫
        .setMaxValues(1) // Establece el n√∫mero m√°ximo de valores seleccionables
        .setMinValues(1) // Establece el n√∫mero m√≠nimo de valores seleccionables
        .addOptions(
          // A√±ade opciones al men√∫
          new StringSelectMenuOptionBuilder() // Crea la primera opci√≥n
            .setDefault(true) // Marca esta opci√≥n como predeterminada
            .setDescription(`Selecciona una de las opciones.`) // Descripci√≥n de la opci√≥n
            .setEmoji("üò∂‚Äçüå´Ô∏è") // Emoji asociado a la opci√≥n
            .setLabel("Selecciona una de las opciones") // Etiqueta que se mostrar√° en el men√∫
            .setValue("one"), // Valor que se enviar√° si se selecciona esta opci√≥n

          new StringSelectMenuOptionBuilder() // Crea la segunda opci√≥n
            .setDefault(false) // No es predeterminada
            .setDescription(`Abrir un ticket de soporte.`) // Descripci√≥n de la opci√≥n
            .setEmoji("‚ò¢Ô∏è") // Emoji asociado a la opci√≥n
            .setLabel("Soporte") // Etiqueta que se mostrar√° en el men√∫
            .setValue("two"), // Valor que se enviar√° si se selecciona esta opci√≥n

          new StringSelectMenuOptionBuilder() // Crea la tercera opci√≥n
            .setDefault(false) // No es predeterminada
            .setDescription(`Abrir un ticket de Reportes.`) // Descripci√≥n de la opci√≥n
            .setEmoji("üò∂") // Emoji asociado a la opci√≥n
            .setLabel("Reportes") // Etiqueta que se mostrar√° en el men√∫
            .setValue("three"), // Valor que se enviar√° si se selecciona esta opci√≥n

          new StringSelectMenuOptionBuilder() // Crea la cuarta opci√≥n
            .setDefault(false) // No es predeterminada
            .setDescription(`Abrir un ticket de Donaciones.`) // Descripci√≥n de la opci√≥n
            .setEmoji("üò∂") // Emoji asociado a la opci√≥n
            .setLabel("Donaciones") // Etiqueta que se mostrar√° en el men√∫
            .setValue("four") // Valor que se enviar√° si se selecciona esta opci√≥n
        )
    );

    // Responde a la interacci√≥n enviando el embed y el men√∫ de selecci√≥n al canal seleccionado
    await channel.send({ embeds: [embed], components: [menu] }); // Env√≠a la respuesta utilizando el embed y el men√∫

    // Responde al usuario que ejecut√≥ el comando con un mensaje ef√≠mero
    await interaction.reply({
      content: `Sistema enviado correctamente`, // Mensaje de confirmaci√≥n
      ephemeral: true, // Hace que el mensaje solo sea visible para el usuario que lo ejecut√≥
    });
  },
};
